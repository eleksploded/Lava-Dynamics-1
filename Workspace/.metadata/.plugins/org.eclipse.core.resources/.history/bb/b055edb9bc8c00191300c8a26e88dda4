package com.eleksploded.lavadynamics;

import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.world.EnumSkyBlock;
import net.minecraft.world.World;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.feature.WorldGenerator;

public class VolcanoGenerator extends WorldGenerator {

	public VolcanoGenerator() {
		super(true);
	}
	
	public boolean generate(World worldIn, Random rand, BlockPos position)
    {
        while (worldIn.isAirBlock(position) && position.getY() > 2)
        {
            position = position.down();
        }

        if (worldIn.getBlockState(position).getBlock() != Blocks.LAVA)
        {
            return false;
        }
        else
        {
            position = position.up(rand.nextInt(4));
            int i = rand.nextInt(12) + 7;
            int j = i / 4 + rand.nextInt(10);

            if (j > 1 && rand.nextInt(60) == 0)
            {
                position = position.up(10 + rand.nextInt(30));
            }

            for (int k = 0; k < i; ++k)
            {
                float f = (1.0F - (float)k / (float)i) * (float)j;
                int l = MathHelper.ceil(f);

                for (int i1 = -l; i1 <= l; ++i1)
                {
                    float f1 = (float)MathHelper.abs(i1) - 0.25F;

                    for (int j1 = -l; j1 <= l; ++j1)
                    {
                        float f2 = (float)MathHelper.abs(j1) - 0.25F;

                        if ((i1 == 0 && j1 == 0 || f1 * f1 + f2 * f2 <= f * f) && (i1 != -l && i1 != l && j1 != -l && j1 != l || rand.nextFloat() <= 0.55F))
                        {
                            IBlockState iblockstate = worldIn.getBlockState(position.add(i1, k, j1));
                            Block block = iblockstate.getBlock();

                            if (iblockstate.getBlock().isAir(iblockstate, worldIn, position.add(i1, k, j1)))
                            {
                                this.setBlockAndNotifyAdequately(worldIn, position.add(i1, k, j1), Blocks.STONE.getDefaultState());
                            }

                            if (k != 0 && l > 1)
                            {
                                iblockstate = worldIn.getBlockState(position.add(i1, -k, j1));
                                block = iblockstate.getBlock();

                                if (iblockstate.getBlock().isAir(iblockstate, worldIn, position.add(i1, -k, j1)) || block == Blocks.DIRT || block == Blocks.SNOW || block == Blocks.ICE)
                                {
                                    this.setBlockAndNotifyAdequately(worldIn, position.add(i1, -k, j1), Blocks.STONE.getDefaultState());
                                }
                            }
                        }
                    }
                }
            }

            int k1 = j - 1;

            if (k1 < 0)
            {
                k1 = 0;
            }
            else if (k1 > 1)
            {
                k1 = 1;
            }

            for (int l1 = -k1; l1 <= k1; ++l1)
            {
                for (int i2 = -k1; i2 <= k1; ++i2)
                {
                    BlockPos blockpos = position.add(l1, -1, i2);
                    int j2 = 50;

                    if (Math.abs(l1) == 1 && Math.abs(i2) == 1)
                    {
                        j2 = rand.nextInt(5);
                    }

                    while (blockpos.getY() > 50)
                    {
                        //IBlockState iblockstate1 = worldIn.getBlockState(blockpos);
                        //Block block1 = iblockstate1.getBlock();

                        /*if (!iblockstate1.getBlock().isAir(iblockstate1, worldIn, blockpos) && block1 != Blocks.DIRT && block1 != Blocks.SNOW && block1 != Blocks.ICE && block1 != Blocks.STONE)
                        {
                            break;
                        }*/

                        this.setBlockAndNotifyAdequately(worldIn, blockpos, Blocks.STONE.getDefaultState());
                        blockpos = blockpos.down();
                        --j2;

                        if (j2 <= 0)
                        {
                            blockpos = blockpos.down(rand.nextInt(5) + 1);
                            j2 = rand.nextInt(5);
                        }
                    }
                }
            }

            return true;
        }
    }
	
	
	public class GenCrater extends WorldGenerator {

		private final Block block;

	    public GenCrater()
	    {
	        this.block = Blocks.LAVA;
	    }

	    public boolean generate(World worldIn, Random rand, BlockPos position)
	    {
	        for (position = position.add(-8, 0, -8); position.getY() > 5 && worldIn.isAirBlock(position); position = position.down())
	        {
	            ;
	        }

	        if (position.getY() <= 4)
	        {
	            return false;
	        }
	        else
	        {
	            position = position.down(4);
	            boolean[] aboolean = new boolean[2048];
	            int i = rand.nextInt(1) + 4;

	            for (int j = 0; j < i; ++j)
	            {
	                double d0 = rand.nextDouble() * 6.0D + 3.0D;
	                double d1 = rand.nextDouble() * 4.0D + 2.0D;
	                double d2 = rand.nextDouble() * 6.0D + 3.0D;
	                double d3 = rand.nextDouble() * (16.0D - d0 - 2.0D) + 1.0D + d0 / 2.0D;
	                double d4 = rand.nextDouble() * (8.0D - d1 - 4.0D) + 2.0D + d1 / 2.0D;
	                double d5 = rand.nextDouble() * (16.0D - d2 - 2.0D) + 1.0D + d2 / 2.0D;

	                for (int l = 1; l < 15; ++l)
	                {
	                    for (int i1 = 1; i1 < 15; ++i1)
	                    {
	                        for (int j1 = 1; j1 < 7; ++j1)
	                        {
	                            double d6 = ((double)l - d3) / (d0 / 2.0D);
	                            double d7 = ((double)j1 - d4) / (d1 / 2.0D);
	                            double d8 = ((double)i1 - d5) / (d2 / 2.0D);
	                            double d9 = d6 * d6 + d7 * d7 + d8 * d8;

	                            if (d9 < 1.0D)
	                            {
	                                aboolean[(l * 16 + i1) * 8 + j1] = true;
	                            }
	                        }
	                    }
	                }
	            }

	            for (int k1 = 0; k1 < 16; ++k1)
	            {
	                for (int l2 = 0; l2 < 16; ++l2)
	                {
	                    for (int k = 0; k < 8; ++k)
	                    {
	                        boolean flag = !aboolean[(k1 * 16 + l2) * 8 + k] && (k1 < 15 && aboolean[((k1 + 1) * 16 + l2) * 8 + k] || k1 > 0 && aboolean[((k1 - 1) * 16 + l2) * 8 + k] || l2 < 15 && aboolean[(k1 * 16 + l2 + 1) * 8 + k] || l2 > 0 && aboolean[(k1 * 16 + (l2 - 1)) * 8 + k] || k < 7 && aboolean[(k1 * 16 + l2) * 8 + k + 1] || k > 0 && aboolean[(k1 * 16 + l2) * 8 + (k - 1)]);

	                        if (flag)
	                        {
	                            Material material = worldIn.getBlockState(position.add(k1, k, l2)).getMaterial();

	                            if (k >= 4 && material.isLiquid())
	                            {
	                                return false;
	                            }

	                            if (k < 4 && !material.isSolid() && worldIn.getBlockState(position.add(k1, k, l2)).getBlock() != this.block)
	                            {
	                                return false;
	                            }
	                        }
	                    }
	                }
	            }

	            for (int l1 = 0; l1 < 16; ++l1)
	            {
	                for (int i3 = 0; i3 < 16; ++i3)
	                {
	                    for (int i4 = 0; i4 < 8; ++i4)
	                    {
	                        if (aboolean[(l1 * 16 + i3) * 8 + i4])
	                        {
	                            worldIn.setBlockState(position.add(l1, i4, i3), i4 >= 4 ? Blocks.AIR.getDefaultState() : this.block.getDefaultState(), 2);
	                        }
	                    }
	                }
	            }

	            for (int i2 = 0; i2 < 16; ++i2)
	            {
	                for (int j3 = 0; j3 < 16; ++j3)
	                {
	                    for (int j4 = 4; j4 < 8; ++j4)
	                    {
	                        if (aboolean[(i2 * 16 + j3) * 8 + j4])
	                        {
	                            BlockPos blockpos = position.add(i2, j4 - 1, j3);

	                            if (worldIn.getBlockState(blockpos).getBlock() == Blocks.DIRT && worldIn.getLightFor(EnumSkyBlock.SKY, position.add(i2, j4, j3)) > 0)
	                            {
	                                Biome biome = worldIn.getBiome(blockpos);

	                                if (biome.topBlock.getBlock() == Blocks.MYCELIUM)
	                                {
	                                    worldIn.setBlockState(blockpos, Blocks.MYCELIUM.getDefaultState(), 2);
	                                }
	                                else
	                                {
	                                    worldIn.setBlockState(blockpos, Blocks.GRASS.getDefaultState(), 2);
	                                }
	                            }
	                        }
	                    }
	                }
	            }

	            if (this.block.getDefaultState().getMaterial() == Material.LAVA)
	            {
	                for (int j2 = 0; j2 < 16; ++j2)
	                {
	                    for (int k3 = 0; k3 < 16; ++k3)
	                    {
	                        for (int k4 = 0; k4 < 8; ++k4)
	                        {
	                            boolean flag1 = !aboolean[(j2 * 16 + k3) * 8 + k4] && (j2 < 15 && aboolean[((j2 + 1) * 16 + k3) * 8 + k4] || j2 > 0 && aboolean[((j2 - 1) * 16 + k3) * 8 + k4] || k3 < 15 && aboolean[(j2 * 16 + k3 + 1) * 8 + k4] || k3 > 0 && aboolean[(j2 * 16 + (k3 - 1)) * 8 + k4] || k4 < 7 && aboolean[(j2 * 16 + k3) * 8 + k4 + 1] || k4 > 0 && aboolean[(j2 * 16 + k3) * 8 + (k4 - 1)]);

	                            if (flag1 && (k4 < 4 || rand.nextInt(2) != 0) && worldIn.getBlockState(position.add(j2, k4, k3)).getMaterial().isSolid())
	                            {
	                                worldIn.setBlockState(position.add(j2, k4, k3), Blocks.STONE.getDefaultState(), 2);
	                            }
	                        }
	                    }
	                }
	            }

	            if (this.block.getDefaultState().getMaterial() == Material.WATER)
	            {
	                for (int k2 = 0; k2 < 16; ++k2)
	                {
	                    for (int l3 = 0; l3 < 16; ++l3)
	                    {
	                        int l4 = 4;

	                        if (worldIn.canBlockFreezeWater(position.add(k2, 4, l3)))
	                        {
	                            int flag = net.minecraftforge.common.ForgeModContainer.fixVanillaCascading ? 2| 16 : 2; //Forge: With bit 5 unset, it will notify neighbors and load adjacent chunks.
	                            worldIn.setBlockState(position.add(k2, 4, l3), Blocks.ICE.getDefaultState(), flag); //Forge
	                        }
	                    }
	                }
	            }

	            return true;
	        }
	    }
		
	}
	
}
